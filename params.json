{"name":"express-restify-mongoose","tagline":"Easily restify mongoose databases","body":"# express-restify-mongoose\r\nThis library provides mongoose database models with a REST interface.\r\n\r\n[![Build Status](https://travis-ci.org/florianholzapfel/express-restify-mongoose.png)](https://travis-ci.org/florianholzapfel/express-restify-mongoose)\r\n[![NPM version](https://badge.fury.io/js/express-restify-mongoose.png)](http://badge.fury.io/js/express-restify-mongoose)\r\n[![Dependencies](https://david-dm.org/florianholzapfel/express-restify-mongoose.png)](https://david-dm.org/florianholzapfel/express-restify-mongoose)\r\n\r\n## Getting started\r\n\r\nIn your shell, install with npm:\r\n\r\n```sh\r\nnpm install express-restify-mongoose\r\n```\r\n\r\nIn your code:\r\n\r\n**Express 3**\r\n\r\n```javascript\r\nvar http = require('http');\r\nvar express = require('express');\r\nvar mongoose = require('mongoose');\r\nvar Schema = mongoose.Schema;\r\nvar restify = require('express-restify-mongoose')\r\n\r\nmongoose.connect('mongodb://localhost/database');\r\n\r\nvar Customer = new Schema({\r\n\tname: { type: String, required: true },\r\n\tcomment: { type: String }\r\n});\r\nvar CustomerModel = mongoose.model('Customer', Customer);\r\n\r\nvar Invoice = new Schema({\r\n    customer: { type: Schema.Types.ObjectId, ref: 'Customer' },\r\n\tamount: { type: Number, required: true }\r\n});\r\nvar InvoiceModel = mongoose.model('Invoice', Invoice);\r\n\r\nvar app = express();\r\napp.configure(function(){\r\n\tapp.use(express.bodyParser());\r\n\tapp.use(express.methodOverride());\r\n\trestify.serve(app, CustomerModel);\r\n\trestify.serve(app, InvoiceModel);\r\n});\r\n\r\nhttp.createServer(app).listen(3000, function() {\r\n\tconsole.log(\"Express server listening on port 3000\");\r\n});\r\n```\r\n\r\n**Express 4**\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar bodyParser = require('body-parser');\r\nvar methodOverride = require('method-override');\r\nvar mongoose = require('mongoose');\r\nvar Schema = mongoose.Schema;\r\nvar restify = require('express-restify-mongoose')\r\n\r\nmongoose.connect('mongodb://localhost/database');\r\n\r\nvar Customer = new Schema({\r\n\tname: { type: String, required: true },\r\n\tcomment: { type: String }\r\n});\r\nvar CustomerModel = mongoose.model('Customer', Customer);\r\n\r\nvar Invoice = new Schema({\r\n    customer: { type: Schema.Types.ObjectId, ref: 'Customer' },\r\n\tamount: { type: Number, required: true }\r\n});\r\nvar InvoiceModel = mongoose.model('Invoice', Invoice);\r\n\r\nvar app = express();\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(methodOverride());\r\n\r\nvar router = express.Router();\r\nrestify.serve(router, CustomerModel);\r\nrestify.serve(router, InvoiceModel);\r\napp.use(router);\r\n\r\napp.listen(3000, function() {\r\n    console.log(\"Express server listening on port 3000\");\r\n});\r\n```\r\n\r\nThen you can excute the following queries:\r\n\r\n```\r\nGET http://localhost/api/v1/Customers/count\r\nGET http://localhost/api/v1/Customers\r\nPUT http://localhost/api/v1/Customers\r\nPOST http://localhost/api/v1/Customers\r\nDELETE http://localhost/api/v1/Customers\r\n\r\nGET http://localhost/api/v1/Customers/:id\r\nGET http://localhost/api/v1/Customers/:id/shallow\r\nPUT http://localhost/api/v1/Customers/:id\r\nPOST http://localhost/api/v1/Customers/:id\r\nDELETE http://localhost/api/v1/Customers/:id\r\n```\r\n\r\n### Query\r\n```\r\nGET http://localhost/api/v1/Customers?name=~regex\r\nGET http://localhost/api/v1/Customers?name=value\r\nGET http://localhost/api/v1/Customers?name=>value\r\nGET http://localhost/api/v1/Customers?name=>=value\r\nGET http://localhost/api/v1/Customers?name=<value\r\nGET http://localhost/api/v1/Customers?name=<=value\r\nGET http://localhost/api/v1/Customers?name=!=value\r\nGET http://localhost/api/v1/Customers?select=name\r\nGET http://localhost/api/v1/Customers?select=-name\r\n```\r\n## Mongoose Query\r\n```\r\nvar query = { $or: [\r\n                {name: '~Another'},\r\n                {$and: [\r\n                    {name: '~Product'},\r\n                    {price: '<=10'}\r\n                ]}\r\n            ],\r\n                price: 20\r\n            };\r\nrequest({\r\n    url: 'api/v1/Model',\r\n    qs: { query: encodeURIComponent(JSON.stringify(query) }\r\n})\r\nGET http://localhost/api/v1/Customers?query={\"field\":\">=value\", \"field\":[value1,value2]\r\n                                                 \"$and\":[{\"field\":\"~value\"},{\"field\":\"!=value\"}]}\r\n```\r\n## Logical Queries (and,or)\r\n```\r\nGET http://localhost/api/v1/Customers?$and=[{\"field\":\">=value\"},{\"field\":[value1,value2]}]\r\nGET http://localhost/api/v1/Customers?$or=[{\"field\":\"value\"},{\"$and\",[{\"field\":\"~value\"},{\"field\":\"!=value\"}]}]\r\n```\r\n\r\n### Ordering & Sorting\r\n```\r\nGET http://localhost/api/v1/Customers?sort=name\r\nGET http://localhost/api/v1/Customers?sort=-name\r\nGET http://localhost/api/v1/Customers?skip=10&limit=10\r\n```\r\n\r\n### Populate Fields\r\n```\r\nGET http://localhost/api/v1/Invoices?populate=customer\r\nGET http://localhost/api/v1/Invoices?populate=customer&select=customer.name\r\n\r\n## populate fields will not have effect on select fields as supported by Mongoose\r\n# populate fields will be fetched along with select fields\r\nGET http://localhost/api/v1/Invoices?populate=customer\r\nGET http://localhost/api/v1/Invoices?populate=customer&select=amount\r\nGET http://localhost/api/v1/Invoices?populate=customer&select=customer,amount\r\nGET http://localhost/api/v1/Invoices?populate=customer&select=customer.name,amount\r\n\r\n```\r\n\r\n## Reference\r\n### serve\r\n```\r\nserve(app, model, [options])\r\n```\r\n\r\n#### arguments\r\n* **app** - The express app\r\n* **model** - Your mongoose database model\r\n* **options** - Optional options object\r\n  * **strict** - When set to true, disallows DELETE all, POST with id param, and PUT without id param\r\n  * **prefix** - Some path that will be prefixed to the REST path. Defaults to `/api`\r\n  * **version** - An API version that will be prefixed to the rest path. Defaults to `/v1`\r\n    * if either api or version contain `/:id` then that will be used as the location to search for the id. `version: 'v1/Entities/:id'` will generate `/api/v1/Entities/:id/<modelName>` and `/api/v1/Entities/<modelName>` for all pertinent methods\r\n  * **idProperty** - If specified, the 'by id' methods will query on the given property instead of _id\r\n  * **middleware** - An express middleware or an array of express middlewares that will be used.\r\n  * **prereq** - A function that takes the req object and returns or yields true or false. This function will be called for every POST PUT and DELETE request and send 403 on false.\r\n  * **access** - A function that takes the req object and returns or yields 'public', 'private', or 'protected'. This function will be called for every GET POST and PUT request and filter out the appropriate fields\r\n  * **plural** - If `true`, does not pluralize the database model name. Default is `false`\r\n  * **lowercase** - If `true`, turn model name to lower case before generating the routes.\r\n  * **name** - If specified, this is used as the name of the endpoint\r\n  * **onError** - A function with the signature `function(err, req, res, next)` that is used to output an error. `err` is the error object that is returned by mongoose. Works best with `fullErrors = true`\r\n  * **outputFn** - A function with the signature `function(res, result)` that is used to output the result. `res` is a restify or express result object, `result` is the result that is returned from the mongo db.\r\n  * **private** - String of comma separated field names which are not to be returned by queries that do not have private access.\r\n  * **protected** - String of comma separated field names which are not to be returned by queries that have public access.\r\n  * **postProcess** - A middleware to be called after the response has been sent. It is only executed on success.  If an error is sent to the client, this is not executed.\r\n  * **lean** - If `false`, will not convert to returned values to plain old javascript objects. This is bad for performance, but it allows for returning virtuals, getters    and setters.\r\n  * **findOneAndUpdate** - If `false`, will first find documents by id and then call save. This\r\n    allows mongoose validators to be called. Default is `true`.\r\n    (For more information, read the Mongoose docs:\r\n    http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate)\r\n  * **findOneAndRemove** - If `false`, will first find documents by id and then call remove. This\r\n    allows mongoose post and pre hooks to be called. Default is `true`.\r\n    (For more information, read the Mongoose docs:\r\n    http://mongoosejs.com/docs/api.html#model_Model.findOneAndRemove)\r\n  * **contextFilter** - `function(model, req, cb)`. Allows authorization per request, for example filtering items based on req.user. Defaults to `cb(model)`.\r\n * **postCreate** - A function with the signature `function (res, result, done)` which is run after document creation.\r\n * **postDelete** - A function with the signature `function (res, result, done)` which is run after document deletion.\r\n * **fullErrors** - When an occurs in mongoose, the full error object, if available, will be returned instead of just the HTTP status message.  Default false\r\n\r\n### defaults\r\n```\r\ndefaults(options)\r\n```\r\n\r\n#### arguments\r\n* options - Same options as above. This function will set this object as the defaults for anything you declare afterwards.\r\n\r\n## Examples\r\n### Basic access control\r\n\r\n```javascript\r\nrestify.serve(app, MyModel, {\r\n  prereq: function(req) {\r\n    if (req.method === 'DELETE') {\r\n      return false;\r\n    } else if (req.user) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  contextFilter: function(model, req, cb) {\r\n    if (req.user) {\r\n      cb(model);\r\n    } else {\r\n      cb(model.find({\r\n        isPublic: true\r\n      }));\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Contributors\r\n* Enric León (https://github.com/nothingbuttumbleweed)\r\n* David Higginbotham (https://github.com/dhigginbotham)\r\n* Jonathan Greenemeier (https://github.com/6eDesign)\r\n* Alan Levicki (https://github.com/alevicki)\r\n* Michael (https://github.com/micheee)\r\n* Matt Roman (https://github.com/romanmt)\r\n* Fetrarijaona R. (https://github.com/fetrarij)\r\n* Jan Paul Erkelens (https://github.com/jperkelens)\r\n* Christoph Herbst (https://github.com/cherbst)\r\n* doobinay (https://github.com/doobinay)\r\n* Hareesh (https://github.com/hareeshbabu82ns)\r\n* 09setht (https://github.com/09setht)\r\n* Zertz (https://github.com/Zertz)\r\n* Ph3n1x (https://github.com/Ph3n1x)\r\n* Emre Efendioğlu (https://github.com/emreefendioglu)\r\n* Tim Mckenzie (https://github.com/timmckenzie)\r\n* Emil Janitzek (https://github.com/wiggin)\r\n* Daniel Henrique Joppi (https://github.com/danieljoppi)\r\n* Caleb Meredith (https://github.com/CalebMer)\r\n* David Souther (https://github.com/DavidSouther)\r\n* Marco Cameriero (https://github.com/95ulisse)\r\n* Jan Melcher (https://github.com/Yogu)\r\n* Urs Wolfer (https://github.com/uwolfer)\r\n* Thomas Forrer (https://github.com/forrert)\r\n\r\n## Formalia\r\n\r\n```\r\nCopyright (C) 2013 by Florian Holzapfel\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}